Notes on GateWayServer:
	Order of running all services:
		1. First you need to run configserver, as others are dependent on it
		2. then you can run eurekaserver, so that microservices can register themselves at start of the app
		3. run all microservices in any order
		3. Run gatewayserver in the end (gateway server should always be executed at the end)
		--> gateway server should always be executed at the end, because it takes all the microservice instances from eurekaserver.
			& all the microservices must be ran so that they can register themselves with eurekaserver, so run gatewayserver at the end.
			
	How to connect to gatewayserver:
		for more details you can visit: http://localhost:8072/actuator/gateway/routes
			above defines all the routing url details,
			
		for example to create a new account through gatewayserver:
			do a POST request thru url: http://localhost:8072/ACCOUNTS/api/accounts/
			-same kind of prefix should be followed for other microservice requests as well, like LOANS & CARDS
				localhost:8072 -> port where gatewayserver is running
				ACCOUNTS -> telling gatewayserver that this is accounts microservice related request, remember that ACCOUNTS name is taken from eurekaserver
					name as appears in eurekaserver should be taken, because gatewayserver takes microservices instances from eurekaserver only
				this ACCOUNTS will be removed, and remaining url will be sent to particular microservice later by gateway handler
				api/accounts/ -> request api
				
		Ideally by default gatewayserver accepts service names in block letters like shown above ACCOUNTS
		to make our gatewayserver accept lowercase letters of service names we can add below props in applications.yml file of gatewayserver
		spring:
		  cloud:
			gateway:
			  discovery:
				locator:
				  lowerCaseServiceId: true
				  
				after making above changes we can modify url as
					http://localhost:8072/accounts/api/accounts/  --> works perfectly fine
					
					
	Http timeout configurations:
		-if a particular api call being invoked using gatewayserver(http://localhost:8072/eazybank/accounts/api/accounts/contact-info), 
			and if the microservice takes longer than usual time to respond then client has to wait until the response is being given
		-so to avoid these kind of situations we can define global timeouts in our gatewayserver app.
		-u can refer following link to get more info https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#http-timeouts-configuration
		-following are the props	
			spring:
			  cloud:
				gateway:
				  httpclient:
					connect-timeout: 1000
					response-timeout: 5s

		-when you add these information in app.yml file, then for any microservice being invoked using gatewayserver and if it takes more time than defined in 
			yml file, then a gateway timeout response will be given to the client, instead of client waiting for lot of time, time saving.
			sample response:
				{
					"timestamp": "2023-11-30T06:33:15.797+00:00",
					"path": "/eazybank/loans/api/loans/contact-info",
					"status": 504,
					"error": "Gateway Timeout",
					"message": "Response took longer than timeout: PT2S",
					"requestId": "caad8600-6",
					"trace": "org.springframework.cloud.gateway.support.TimeoutException: Response took longer than timeout: PT2S\r\n"
				}
		-if you've circuit breaker defined for any of the microservice, then this global timeout will not work if that particular microservice fails to send/establish connection
			to gatewayserver, because circuit breaker has more precedence compared to global timeout
			that's why on calling http://localhost:8072/eazybank/accounts/api/accounts/contact-info
			gives custom circuit breaker response
			
			
	Retry pattern:
		-it is one of the microservice resilient patterns, in this we try to do some retries on calling the same api, when there is a timout or exception
			happens, we define number of retries, for how many seconds each retry should happen
		-code like shown below
								.retry(retryConfig -> retryConfig.setRetries(3)
//										setting retries only to GET requests
//										only set retries to idempotent requests(requests that always send same response)
//										if you set retries to like POST/PUt, then if we retry multiple times then the data might get corrupted/duplicated
//										so care should be taken while doing setMethods to retry
										.setMethods(HttpMethod.GET)
//										setting backOff, if we retry multiple times, with some factor like 2, by coming to end of retries
//										there will be large amount of time to wait between two retries, so instead of waiting for that much of time
//										we can define some limit within which a retry will happen
										.setBackoff(Duration.ofMillis(100), Duration.ofMillis(1000), 2, true)))
			
			