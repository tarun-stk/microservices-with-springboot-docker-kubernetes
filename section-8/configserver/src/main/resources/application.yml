#defining port
server:
  port: 8071

#givnig name to our app
spring:
  application:
    name: "configserver"

#giving native as the profile
  profiles:
#    active: native
#    activating git as profile
    active: git
  cloud:
    config:
      server:
#        under native profile, defining the location where our config folder is present
#        native is only used when working with file system or using classpath
#        native:
#          1.using spring cloud first approach
#          storing config server in our classpath
#          disadvantages:
#           who has access to our config app can see what's there inside this
#          search-locations: "classpath:/config"
#          2.using second approach, using file system
#           copy whole config folder, and paste at place inside your local machine
#           and mention
#             search-locations: "file///[location of config folder inside machine]"
#            advantages:
#             using this folder approach, we can lock this folder for security reasons, and cab be accessed by authorised personnel
#        search-locations: "file///C:/config"
#           3. using third approach using git hub repo to store our profiles
#            change native to git saying that we're using git appraoch now
#            also update uri to github repo url
        git:
          uri: "https://github.com/tarun-stk/tarun-stk-config.git"
#          mention which branch
          default-label: main
#          mention time out, if connection not established within this many seconds, please stop processing & immediately throw exception
          timeout: 5
#          by doing delow step, saying that clone to repo at start of app only, if not mentioned
#          this will clone when the very first request comes, which might cause issues, and delays
          clone-on-start: true
#          we're forcing to use remote repo ,
#          because if you've cloned local repo, then if you've made changes in local, it will cause issues,
#          always use remote master repo to works
          force-pull: true

#boot actuator related prop, enabling all management related endpoints like, refresh, bus refresh
#  by default only health endpoint is exposed
management:
  endpoints:
    web:
      exposure:
        include: "*"
#        props regarding liveness and readiness of the app
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
    endpoint:
      health:
        probes:
          enabled: true







#  http://localhost:8071/loans/qa  -> selects qa as profile
#you can play around with other things for cards & accounts as well
#http://localhost:8071/[servicename]/[profilename]
#[servicename] -> accounts, loans, cards
#  [profilename] -> default, qa, prod
#and gives all qa related information

#gives output as follows
#  {
#    "name": "loans",
#    "profiles": [
#      "qa"
#    ],
#    "label": null,
#    "version": null,
#    "state": null,
#    "propertySources": [
#      {
#        "name": "classpath:/config/loans-qa.yml",  -> qa profile
#        "source": {
#          "build.version": "2.0",
#          "loans.message": "Welcome to EazyBank loans related QA APIs ",
#          "loans.contactDetails.name": "Cyrano Marita - QA Lead",
#          "loans.contactDetails.email": "cyrano@eazybank.com",
#          "loans.onCallSupport[0]": "(785) 545-6565",
#          "loans.onCallSupport[1]": "(853) 546-3467"
#        }
#      },
#      {
#        "name": "classpath:/config/loans.yml",  -> defualt
#        "source": {
#          "build.version": "3.0",
#          "loans.message": "Welcome to EazyBank loans related local APIs ",
#          "loans.contactDetails.name": "Amaal Grega - Developer",
#          "loans.contactDetails.email": "amaal@eazybank.com",
#          "loans.onCallSupport[0]": "(452) 456-2176",
#          "loans.onCallSupport[1]": "(546) 764-8934"
#        }
#      }
#    ]
#  }